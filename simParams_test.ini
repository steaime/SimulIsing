; Configuration file for SimulIsing_v3
; by Stefano Aime, May 2, 2021

[model]				; Model parameters
LatticeShape0 = 0 		; Number of sites along direction 0. Set to 0 to use default value (NumSites below)
LatticeShape1 = 0
LatticeShape2 = 1
LatticeShape3 = 1 		; ... etc, until LatticeShaped (d is the dimensionality, hard-coded)
				; Current version has d=4. Setting last dimension(s) to 1 is equivalent to
				; working in a lower-dimensional subspace
NumSites = 32			; This value replace any missing value in LatticeShapeN
				; (if LatticeShapeN are all 0 or missing, lattice shape will be NumSites^d)
K = 30.74
n = 3.7
Tau0 = 7891
Omega = 3.14
Beta = 2
UsePBC = true
RateAvgType = 1 		; Avg types: 0 - aritmetic, 1 - harmonic, 2 - geometric
UseNewEqn = true 		; If true, use new model (in this case Beta is not used)
NoiseOnGlassiness = false 	; If false, directly take alpha as a random variable distributed around AlphaAverage
				;          with a distribution defined by AlphaNoiseType, AlphaParam0
				; If true: parameter AlphaAverage here below is disregarded
				;          and NormGlassiness is used instead.
				;          disorder is realized by distributing local values of 1-g_ij/gmax
				;          around an average value 1-NormGlassiness
				;          and with a distribution defined by AlphaNoiseType, AlphaParam0
SiteBasedNoise = false 		; If false, each single coupling constant alpha_ij is independently drawn
				;          from the prescribed distribution
				; If true: all coupling constants linked to one given site are initially
				;          given the same, site-based value. Then the coupling constants
				;          are made symmetric to ensure that alpha_ji = alpha_ij
				;          by taking the average of the two site-based parameters
SBNoiseAvgType = 2		; Type of averaging performed if SiteBasedNoise == true
				; See below for average types
AlphaNoiseType = 5		; See Noise types below
NormGlassiness = 0.7		; Corresponds to g/gmax. Only used if AlphaFromGlassiness==true
AlphaAverage = 0.0047 		; Only used if AlphaFromGlassiness==false
AlphaParam0 = 0.18
AlphaParam1 = 0.0		;... etc, until AlphaParamN
AlphaParamFile = alphaMap.raw	; If this parameter is defined, AlphaParamN above are disregarded
				; and parameters are loaded from binary file specified here
				; If a relative path is specified, root folder is the output folder
				; Binary file has the same format as a raw file saved from the analysis,
				; and should have a 12-bytes header: 
				; - 4 bytes for 'image number', which in this case should be 1
				; - 8 bytes for the number of values in the file
				; WARNING: this may work unexpectedly for SORTED_LIST && site-based noise!
ForbidUnphysicalAlpha = false   ; true to clip alpha distribution to physically-acceptable values,
 				; between 0 and alpha_max, where alpha_max corresponds to maximum glassiness
 				; beyond which no yielding occurs at finite strain amplitudes
				; (in mean field, of course)

; Noise types:
; - 0: NONOISE 		No parameter required, all values equal to AlphaAverage
; - 1: WHITE_FLAT 	One parameter required (the noise relative variance)
;			NOTE:   if average==0 the parameter will be interpreted as the
;					absolute variance, instead of the relative variance.
;					Random numbers generated with flat distribution in the
;					[_avg-amplitude, _avg+amplitude] interval, with
;					amplitude = sqrt(3 * relative_variance * _avg)
; - 2: WHITE_GAUSS	One parameter required (the noise relative variance)
;			Random numbers generated following a Gauss distribution
;			with the given variance
; - 3: WHITE_LOGNORM 	One parameter required (the noise relative variance)
;			Random numbers generated following a Lognormal distribution
;			with the given variance
; - 4: WHITE_CUSTOM     3N+2 parameters required: the first parameter is the median value
;			(i.e. the value for which the cumulative distribution is 0.5)
;			The second parameter is N, the number of points
;			characterizing the custom cumulative distribution, followed by
;			x1, C1, Cerr1, x2, C2, Cerr2, ..., xN, CN, CerrN satisfying : 
;			(1) 0 <= Ci <= 1; (2) Ci <= Ci+1; (3) xi < xi+i; (4) Cerri >= 0
;			Note: the maximum N is set by the hard-coded constant INI_NOISE_MAXPARAMS.
;			Parameters are randomly generated in such a way that their
;			cumulative distribution interpolates linearly the points given by {(xi, Ci)}
;			with a standard error on each point given by Cerri
;			NOTE:   To avoid risky extrapolations, make sure that C0=0 and CN=1
; - 5: SORTED_LIST	N+1 parameter required: the first is the number of values in the list,
;			then there is an ordered list of N values. 

; Average types:
; - 0: ARITMETIC  	z   = (x + y) / 2
; - 1: HARMONIC 	1/z = (1/x + 1/y) / 2
; - 2: GEOMETRIC 	z^2 = x * y
;			equiv: log(z) = (log(x) + log(y)) / 2
; - 3: MAXIMUM 		z   = max(x, y)
; - 4: MINIMUM 		z   = min(x, y)

[simulation]
SimNumber = 1			; number of simulations to be performed in parallel (for statistics)
GammaListFromFile = false 	; true if you want to load a specific list of gamma values from file
;GammaListFile = GammaList.txt	; Text file with a list of gammas, one per line
				; If a relative path is specified, root folder is the output folder
MinGamma = 0.01
MaxGamma = 0.1
PPDGamma = 10
RunPreshear = true
RunAscDesc = false
ForceMeanField = false		; true to couple local rates to the average rate (mean field)
				; false (default) to couple rates between neighbor sites

[output]
OutFolder = D:\steaime\Documents\Research\Projects\SoftGlasses\Ising\out\v4\LUDOX45\run24_copyAlphasInit\
				; Output folder, end with '\'
PrintOutput = true		; If false: disable print output to screen
SaveRateHistogram = true	; Save histogram of local rates (one file per simulation, one column per gamma)
SaveAlphaHistogram = true	; Save histogram of coupling constants (one file for all simulations)
SaveCorrelations = false	; Save spatial correlations
SaveRawSnapshots = true		; Save snapshot of spatial configuration of local rates at steady state
SaveInitSnapshot = true		; Save snapshot of spatial configuration of initial rates
SaveAlphaSnapshot = true 	; Save snapshot of spatial configuration of alpha coupling parameters
Out_PrintStdRate = true		; Print standard deviation of local rates to main output
Out_PrintNloops = true		; Print number of iterations required for convergence to main output
Out_PrintFastSites = true	; Print fraction of fast sites at steady state to main output
				; Warning: fraction fast sites are defined setting a sharp threshold based on Tau0
				; The coefficient is hard-coded (see Constants.h)

[initialization]
Type = 5			; See Noise types above
Average = -1 			; Set to -1 to initialize values to 1/Tau0 (defined in model section)
InitParam0 = 0
InitParam1 = 0			;... etc
InitParamFile = initMap_banded.raw	; If this parameter is defined, AlphaParamN above are disregarded
				; and parameters are loaded from binary file specified here
				; If a relative path is specified, root folder is the output folder
InitFileHeader = 0		; Binary header size, in bytes. 
				; - If 0, the program will read N values, N being the number of sites
				; - If 4 or 8, the header should be an int32 or int64 with the number of values to read
				; - If 12 (default), the header should be: 
				;    - 4 bit for 'image number', which in this case is 1
				;    - 8 bit for the number of values in the file
				;   This corresponds to the output format generated by the program
InitFileFormat = f		; pixel format for input file. If any of {d, f, I, i, H, h, B, b}
				; is specified, the file will be treated as a binary file with format as below
				; Currently, no other format is supported
InitFileSwapEndian = true	; Set it to true if the binary file has a different endianness
				; than the machine architecture (default: false)

; File formats:
; - 'd' (default): double (64-bit)
; - 'f' : float (32-bit)
; - 'I' : uint32_t (unsigned integer, 32-bit)
; - 'i' : int32_t (signed integer, 32-bit)
; - 'H' : uint16_t (unsigned integer, 16-bit)
; - 'h' : int16_t (signed integer, 16-bit)
; - 'B' : uint8_t (unsigned integer, 8-bit)
; - 'b' : int8_t (signed integer, 8-bit)

[equilibration]
; All default values in this section are hard-coded (see Constants.h)
Temperature = 0     		; Effective temperature: sets the random jump on top of deterministic dynamics
NoiseCoefficient = 1.0		; Random thermal jump settings: every simulation step 
				; - takes val_current as the current value of the cell,
				; - computes val_target using the expression based on actual values of the neighbors
				; - if NoiseLog==false:	generates a random number with Gaussian probability distribution
				;			centered around val_target with variance proportional to effective temperature
				;			specify proportionality constant. Sets the new rate to this random number
				; - if NoiseLog==true:	generates a random number with Gaussian probability distribution
				;			centered around log10(val_target) with variance proportional to effective temperature
				;			specify proportionality constant. Sets the new rate to pow(10, this random number)
NoiseLog = true 		; if true, add LogNormal noise, if false, add Gaussian noise (see above)
MaxIterations = 10000		; Maximum number of simulation steps
ConvergencePrecision = 1e-40	; Convergence precision, to decide if simulation has converged
				; Set to 0 not to check for convergence (in this case every step
				; will have the maximum number of iterations)
				; Suggestion: for DeviationLog==false, try ConvergencePrecision=1e-6
DeviationLog = true		; if false: deviation between current configuration and target configuration
				;           is computed using the difference of relaxation rates
				; if true:  deviation is computed using the difference of log10(rate)
				;           (to give equal weight to slow and fast mode)
Protocol = 0			; Temperature profile during equilibration. Available protocols:
				; - 0: CONSTANT	constant temperature
				;		1 parameter required (the effective temperature)
				; - 1: LINRAMP	temperature linearly decreasing from T0 to 0
				;		2 parameters required
				;		- ProtocolParams[0] is T0
				;	  	  If negative, the current temperature will be used as T0
				;		- ProtocolParams[1] is the rate (T[i]-T[i+1], where i is the equilibration step index)
				;		  It MUST be positive
				; - 2: EXPRAMP	temperature exponentially decreasing from T0 to T1, then set to 0
				;		3 parameters required
				;		- ProtocolParams[0] is T0
				;		  If negative, the current temperature will be used as T0
				;		- ProtocolParams[1] is T1
				;		  It MUST be >= T0 (or >= to the current temperature, if T0<0)
				;		- ProtocolParams[2] is the exponential rate (log10(T[i])-log10(T[i+1]), where i is the equilibration step index)
				;		  It MUST be positive
				; - 3: PWRRAMP	temperature decreasing as a power law from T0 to T1, then set to 0
				;		3 parameters required
				;		- ProtocolParams[0] is T0
				;		  If negative, the current temperature will be used as T0
				;		- ProtocolParams[1] is T1
				;		  It MUST be >= T0 (or >= to the current temperature, if T0<0)
				;		- ProtocolParams[2] is the exponent (It MUST be negative)
ProtocolParam1 = 0.0		; No ProtocolParam0: that's always the Temperature. For the others, check definitions above
ProtocolParam2 = 0.0		; etc...
EquilibrationRunNumber = 1	; Run the whole equilibration protocol (until convergence or for MaxIterations steps)
				; EquilibrationRunNumber times. Useful for Protocol!=0


[format]
TextExt = .txt
RawExt = .raw
HistogramPrefix = hist_
CorrelationPrefix = corr_
RawFinalPrefix = raw_
AlphaSnapshotPrefix = alpharaw_
InitSnapshotPrefix = initraw_
PreshearPrefix = ps_
AscdescPrefix = ad_
OutputFilePrefix = out_
StatsFilePrefix = stat_
SimParamsName = sim_params.txt

[analysis]
RefFileColNum = 3
RefFileColIdxStrain = 0
RefFileColIdxRate = 1
RefFileColIdxChi = 2
FastSitesRelThr = 5		; Threshold for a site to be considered 'fast'
        			; fast sites are the ones where Gamma_i > FastSitesRelThr / Tau0
DiffRelRate = true
DiffWeightRate = 1.0
DiffWeightChi = 1.0
DiffCombine = true		; if true:  combine deviation in Chi and in Rate on a unique parameter 
                        	;           using DiffWeightRate and DiffWeightChi
                        	; if false: SweepAndCompare() will output two values
                        	;           one for deviation in Chi, another for deviation in Rate